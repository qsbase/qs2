// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// qs_save
SEXP qs_save(SEXP object, const std::string& file, const int compress_level, const bool shuffle, const int nthreads);
RcppExport SEXP _qs2_qs_save(SEXP objectSEXP, SEXP fileSEXP, SEXP compress_levelSEXP, SEXP shuffleSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type object(objectSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    Rcpp::traits::input_parameter< const bool >::type shuffle(shuffleSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(qs_save(object, file, compress_level, shuffle, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// qs_read
SEXP qs_read(const std::string& file, const int nthreads);
RcppExport SEXP _qs2_qs_read(SEXP fileSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(qs_read(file, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// qd_save
SEXP qd_save(SEXP object, const std::string& file, const int compress_level, const bool shuffle, const bool warn, const int nthreads);
RcppExport SEXP _qs2_qd_save(SEXP objectSEXP, SEXP fileSEXP, SEXP compress_levelSEXP, SEXP shuffleSEXP, SEXP warnSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type object(objectSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    Rcpp::traits::input_parameter< const bool >::type shuffle(shuffleSEXP);
    Rcpp::traits::input_parameter< const bool >::type warn(warnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(qd_save(object, file, compress_level, shuffle, warn, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// qd_read
SEXP qd_read(const std::string& file, const bool use_alt_rep, const int nthreads);
RcppExport SEXP _qs2_qd_read(SEXP fileSEXP, SEXP use_alt_repSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_alt_rep(use_alt_repSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(qd_read(file, use_alt_rep, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qs2_qs_save", (DL_FUNC) &_qs2_qs_save, 5},
    {"_qs2_qs_read", (DL_FUNC) &_qs2_qs_read, 2},
    {"_qs2_qd_save", (DL_FUNC) &_qs2_qd_save, 6},
    {"_qs2_qd_read", (DL_FUNC) &_qs2_qd_read, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_qs2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
